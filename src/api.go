// Code generated by go-bindata.
// sources:
// src/api/file.wren
// src/api/strings.wren
// src/api/testing.wren
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _srcApiFileWren = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8f\xcf\x6a\xf3\x30\x10\xc4\xef\x7a\x8a\x3d\x26\xf0\x7d\x56\x52\xe8\x25\x94\x12\x28\x49\x1b\x48\x7b\x69\x5f\x60\x23\xad\xed\xa5\xb2\x64\xf4\xc7\x26\x2d\x79\xf7\x6e\x1c\x9f\x22\x74\xd1\xec\xcc\x6f\x47\x5a\x43\x62\x18\x56\xd5\xaa\x5a\xff\xb7\x34\x28\xad\xe5\xc2\xc2\x2c\xe1\x0d\x63\x3c\xc3\x11\xc7\x48\xde\x10\x3c\xac\xd6\x8f\xf3\x74\xdb\xa3\xf9\xc6\x86\x24\x3a\x3d\x07\x8a\x89\x83\x87\x7b\xca\x16\x4b\x6e\x43\xbc\x27\x3d\xb5\x39\xf7\x1b\xad\x1b\xce\x6d\x39\x55\x26\x74\xba\xc5\x9f\x53\x78\x9e\x63\x47\x36\xe4\x13\x6d\xe0\xfd\xf0\x35\x4b\x7b\xa1\xe4\x96\xa0\x2e\xce\x81\x09\xfd\x39\x72\xd3\x66\x40\x6f\xc1\xdd\xdc\xc0\xbe\x0e\xb1\xc3\x2c\x45\xfe\x41\xef\x08\x45\x1b\x98\xc6\x29\x77\x3c\xbc\xec\x3e\x3e\x77\x57\x54\xcd\x8e\x44\xc3\x0c\x23\x26\xb0\x9c\x72\xe4\x53\xc9\x64\x61\x94\x3e\x32\xe1\x04\x29\x94\x28\x45\x4d\xb0\x54\x29\x65\x1c\xa6\x04\xfb\x6b\xee\x57\x81\x9c\x5b\x21\xe2\xc6\x43\x47\xf2\x43\x2b\x1c\xaa\xd9\x0b\x83\x3d\xbc\x86\xc9\x54\xcf\x8e\x48\x68\x17\xd7\xa5\x1e\x3b\x5a\xaa\x69\x66\x82\x97\xb5\xc5\x64\xf0\x34\x2e\x96\x82\x9d\xe4\x8b\xba\xa8\xbf\x00\x00\x00\xff\xff\x57\x75\xab\x54\x91\x01\x00\x00")

func srcApiFileWrenBytes() ([]byte, error) {
	return bindataRead(
		_srcApiFileWren,
		"src/api/file.wren",
	)
}

func srcApiFileWren() (*asset, error) {
	bytes, err := srcApiFileWrenBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/api/file.wren", size: 401, mode: os.FileMode(420), modTime: time.Unix(1442239804, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _srcApiStringsWren = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\xcf\x6e\xdb\x30\x0c\xc6\xef\x7e\x0a\x1e\x63\x20\xb3\xd3\x01\xbb\x14\xdb\x50\xa0\xe8\xd6\x00\xd9\x1f\x20\xbb\x07\x8a\x4c\xdb\xc2\x14\xc9\x90\xe4\x64\xe9\xd0\x77\x1f\x2d\x4b\x8b\xe3\xd4\x1b\x52\xa3\x07\x97\xfc\xf8\xe9\x27\x9a\x4c\x9e\x83\x15\xb0\x5f\x64\x8b\xec\xe6\x4d\x81\xfb\x24\xcf\xe9\x0f\x66\x3c\x85\x47\x66\xcc\x11\x56\xec\x60\x50\x71\x84\xb7\x8b\x9b\x77\x21\x7b\xd7\x30\xfe\x93\x55\x48\xa5\xfe\xdf\x3d\x1a\x2b\xb4\x82\xb1\xcb\x1d\x6b\x5d\xad\xcd\xd8\xe9\x7d\xed\x5c\x73\x9b\xe7\x95\x70\x75\xbb\xcd\xb8\xde\xe5\x35\x7b\xda\xea\x8f\xa1\x6c\x25\x38\x2a\x8b\xb7\xf0\x65\xf9\x23\x84\x3e\x91\x8b\xab\x11\xca\x56\x4a\xe0\xba\x39\x1a\x51\xd5\x0e\x98\x2a\x40\xf6\x6a\x10\xaa\xd4\x66\xc7\x1c\x81\xcc\xa1\x91\xc8\x28\xb6\x17\x78\xf0\x75\xab\xe5\xfd\xc3\xd7\xf5\x43\x67\x55\x0a\x89\x14\x63\x0e\x0e\xcc\x42\x21\xac\x33\x62\xdb\x3a\x2c\xe0\x40\x3c\x94\x11\x16\xac\x6e\x0d\x81\x72\x5d\x60\x96\x24\x5c\x32\x6b\x61\x4d\x3a\x55\x59\xf8\x9d\x00\x3d\x3d\x13\x8a\x4a\xc1\x0e\xe9\x92\x05\x59\x61\x29\x14\xd9\x08\x05\x9f\xb5\x17\x95\x41\xc1\xb5\x72\x4c\x28\x3b\xb3\x73\xb0\xed\x96\x4e\x4c\xcf\xf2\x35\xb3\xdf\x0d\x55\xff\xea\x04\x8d\x7f\xbb\x10\xac\xdb\x32\x08\xac\x7f\x3b\x17\x08\x55\x60\x9f\xc4\xe6\x3c\x43\xec\x6e\x79\x96\xf5\x69\x42\x22\x8c\x96\x3b\x50\x78\x98\xa5\x74\x2b\x1f\x7e\x4e\xe2\xed\xee\xa3\x80\x3a\xef\x1b\xb3\xb1\xbe\x01\x74\x94\x70\x82\x49\xf1\x84\xe6\x05\xa7\x5e\x94\x86\x2e\x75\x4f\xac\xfb\x00\xfd\xcb\xe8\x9c\x98\xb6\xe8\x5c\x70\xec\x23\xaf\xb7\xaa\xc6\x56\x03\x0b\x83\xae\x35\x2a\x4a\x47\x06\x8f\x28\x1b\x34\xe1\x83\x76\x1d\xa4\x8f\x21\x94\xeb\x1c\x86\x05\x3e\x38\xf0\x5c\x7e\xcb\x7c\x68\x16\x44\xe9\xb8\x95\x4c\x4a\x7b\x39\x0c\x9b\xf9\x26\xa5\xf9\x33\xc8\x9d\x3c\x82\x56\x51\xde\xcd\x6b\xbc\x4a\x63\x34\x11\xb9\x63\xec\x74\x18\xa3\x7e\x86\x2e\xaf\xd5\x0d\x6f\x76\x3a\xa0\x37\x39\x9f\xb9\x29\xac\xd3\x0c\x5e\xcd\x75\x2a\x0d\xb3\x3b\x01\x36\x38\x22\x92\x0d\x87\xfd\x1f\x64\x61\xf8\x5f\x43\x16\xf7\xa6\x5f\x9a\x69\xb2\x78\xc4\xa9\x67\xe5\x7f\xc9\xfa\xad\xbb\x9a\x2a\x2c\x2b\xed\xe2\x04\x4e\xf0\xfd\x8b\x12\x77\x7a\x8a\xe3\xb4\xe3\x57\xb3\x0c\x7e\x1e\xa6\x79\x06\xfe\x2f\x30\x3d\x27\x7f\x02\x00\x00\xff\xff\xfc\xfd\x1f\xdd\x45\x06\x00\x00")

func srcApiStringsWrenBytes() ([]byte, error) {
	return bindataRead(
		_srcApiStringsWren,
		"src/api/strings.wren",
	)
}

func srcApiStringsWren() (*asset, error) {
	bytes, err := srcApiStringsWrenBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/api/strings.wren", size: 1605, mode: os.FileMode(420), modTime: time.Unix(1442235868, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _srcApiTestingWren = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x5c\x8e\x51\x4b\xc3\x30\x14\x85\x9f\x9b\x5f\x71\x7d\xdb\x60\xb6\xdb\xc0\x97\xa1\x32\x90\x89\x83\xe9\x8b\xfb\x03\x77\xe9\x6d\x1b\xcc\x92\x9a\xdc\xb4\x4c\xe9\x7f\xf7\xae\x0e\x91\x85\x10\xb8\xdf\x3d\xe7\xe4\x14\x05\x44\x03\xdd\x3c\x9f\xe7\x8b\xdb\x92\x3a\x55\x14\x72\x61\xa2\xa7\xf0\x82\x21\x9c\x60\x87\x7d\x20\xa7\x09\x96\xf3\xc5\xdd\x65\xbb\x6e\x51\x7f\x60\x4d\x62\x1d\xc7\x8e\x42\x34\xde\xc1\x75\xca\x1a\x13\x37\x3e\x5c\x27\xdd\x37\xcc\xed\xaa\x28\x6a\xc3\x4d\x3a\xe4\xda\x1f\x8b\x06\xbf\x0e\xfe\xf1\x62\xdb\x19\x4d\x2e\xd2\x0a\x5e\xb7\xfb\x0b\x7a\x96\x14\x6e\x08\xaa\x64\x2d\x68\xdf\x9e\x82\xa9\x1b\x06\x74\x25\xd8\x5f\x35\x18\x57\xf9\x70\x44\x96\x22\x33\x68\x2d\xa1\xb0\xce\x50\x3f\xfa\x76\xdb\xa7\xcd\xdb\xfb\xe6\x1c\x55\x19\x4b\xc2\x90\xa1\xc7\x08\xa5\x89\x1c\xcc\x21\x31\x95\xd0\x4b\x1f\xd9\x98\x08\xd1\xa7\x20\x45\xb5\x2f\x29\x57\x4a\x5b\x8c\x11\xf6\x14\xd9\xb8\x1a\xbe\x15\xc8\xd1\xde\x89\x31\x69\x06\x47\xfd\x64\x2a\x74\xc4\x83\x52\x99\x88\x29\xf0\xe6\x33\xa1\x8d\x93\x0e\xed\x62\x06\xf2\x2e\xcf\x9a\x2c\x33\x15\x8c\x0c\x6e\x1e\xfe\xd1\x2c\x10\xa7\xe0\xa0\x12\x0b\xc9\x3c\xa8\x3f\x24\x9f\x08\x19\xd4\xa0\x7e\x02\x00\x00\xff\xff\x53\x48\xbb\x00\xab\x01\x00\x00")

func srcApiTestingWrenBytes() ([]byte, error) {
	return bindataRead(
		_srcApiTestingWren,
		"src/api/testing.wren",
	)
}

func srcApiTestingWren() (*asset, error) {
	bytes, err := srcApiTestingWrenBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "src/api/testing.wren", size: 427, mode: os.FileMode(420), modTime: time.Unix(1442237382, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"src/api/file.wren": srcApiFileWren,
	"src/api/strings.wren": srcApiStringsWren,
	"src/api/testing.wren": srcApiTestingWren,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"src": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"file.wren": &bintree{srcApiFileWren, map[string]*bintree{
			}},
			"strings.wren": &bintree{srcApiStringsWren, map[string]*bintree{
			}},
			"testing.wren": &bintree{srcApiTestingWren, map[string]*bintree{
			}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

